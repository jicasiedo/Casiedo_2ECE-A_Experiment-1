{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "05491ab0-8d91-4fe0-9e80-09ec4c2be8f4",
   "metadata": {},
   "source": [
    "# EXPERIMENT 1 - Introduction to Python Programming\n",
    "# Casiedo, Jihan Harvey C.\n",
    "# 2ECE-A\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de87ccb2-7620-4107-9e25-4d1baf4fe46e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Problem 1: Alphabet Soup Problem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a1570f8e-129f-4aab-8731-1974e4bbab13",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the word you want to alphabetize:  casiedo\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'acdeios'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def alphabet_soup(word): #create the function\n",
    "    word = sorted(word) #sort the word in alphabetical order\n",
    "    alphabetized = \"\".join(word) #Combines the list of values in the array\n",
    "    return alphabetized\n",
    "    \n",
    "word = input(\"Enter the word you want to alphabetize: \")\n",
    "alphabet_soup(word)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5e246d67-c769-443c-918f-d47f5e9d2261",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Problem 2: Emoticon Problem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "9c108236-0357-482d-954f-e34855344ddd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "How do you feel today: I am sad\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I am :((\n"
     ]
    }
   ],
   "source": [
    "def emotify(feelings): #create the function\n",
    "\n",
    "    feelings = feelings.replace(\"smile\", \":)\") #set the conditions\n",
    "    feelings = feelings.replace(\"grin\", \":D\")\n",
    "    feelings = feelings.replace(\"sad\", \":((\")\n",
    "    feelings = feelings.replace(\"mad\", \">:(\")\n",
    "    return feelings\n",
    "\n",
    "feelings = input(\"How do you feel today:\")\n",
    "print (emotify(feelings))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "382c1e7a-0fc4-4028-899d-18d859eeb670",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Problem 3: Unpakcing List Problem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "4f7d3565-e2d5-44d5-97cd-ab37cbdf844e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The 1st variable of mylist: 1  The variables in the middle of mylist: [2, 3, 4, 5]  The last variable of mylist: 6\n"
     ]
    }
   ],
   "source": [
    "mylist = [1,2,3,4,5,6] #create a list\n",
    "\n",
    "first = mylist[0] \n",
    "middle = mylist[1:-1]\n",
    "last = mylist[-1]\n",
    "\n",
    "#display the values of the first, middle, and last variables\n",
    "print(\"The 1st variable of mylist: \" + str(first), \" The variables in the middle of mylist: \" + str(middle), \" The last variable of mylist: \" + str(last))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
